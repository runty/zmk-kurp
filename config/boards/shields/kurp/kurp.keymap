/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define ALPHA       0
#define SYMBOL      1
#define NUMBER      2
#define NAVIGATION  3

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <180>;
};

&lt {
    tapping_term_ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <0 9>;
            bindings = <&bootloader>;

        };
    };

    behaviors {
        qesc: tap_dance_qesc {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_qesc";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp Q>, <&kp ESC>;
        };

        bkt: tap_dance_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bracket";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        brc: tap_dance_brace {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_braces";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        par: tap_dance_paren {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_paren";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };

        thn: tap_dance_then {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_then";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LT>, <&kp GT>;
        };

        skq: sticky_quick {
            compatible = "zmk,behavior-sticky-key";
            label = "sticky_quick";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <200>;
            quick-release;
        };

        hrm: homerow_mods {
           compatible = "zmk,behavior-hold-tap";
           label = "homerow_mods";
           #binding-cells = <2>;
           tapping-term-ms = <250>;
           quick-tap-ms = <0>;
           flavor = "tap-preferred";
           bindings = <&kp>, <&kp>;

        };

    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)

        slmacro: slmacro {
            label = "slmacro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <10>;
            bindings
                = <&macro_tap_time 10>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp L>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp I &kp N &kp K &kp N8>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp S>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp E &kp R &kp V &kp I &kp C &kp E &kp RET>
                ;
        };

        philmacro: philmacro {
            label = "philmacro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <10>;
            bindings
                = <&macro_tap_time 10>
                , <&macro_tap &kp D &kp O &kp I &kp N &kp K &kp N4 &kp N2 &kp RET>
                ;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYMBOL NUMBER>;
            then-layer = <NAVIGATION>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ALPHA_layer {
            bindings = <
                &qesc   &kp W   &kp E       &kp R       &kp T        &kp Y     &kp U            &kp I     &kp O    &kp P
                &mt LCTRL A &mt LALT S &mt LGUI D &mt LSHIFT F &kp G &kp H &mt LSHIFT J &mt LGUI K &mt LALT L &mt LCTRL SQT
                &kp Z   &kp X   &kp C       &kp V       &kp B        &kp N     &kp M     &kp COMMA &kp DOT  &kp SLASH
                                &lt 2 TAB &lt 1 BSPC &kp ESC &kp DEL &lt 2 SPACE &kp RET
            >;
        };

        SYMBOL_layer {
            bindings = <
                &none   &kp F7   &kp F8    &kp F9    &kp F10   &kp CAPS   &none    &none    &none    &none
                &none   &kp F4   &kp F5    &kp F6    &none  &kp LEFT   &kp DOWN    &kp UP      &kp RIGHT   &kp SEMI
                &none   &kp F1   &kp F2    &kp F3    &none  &kp HOME   &kp PG_UP   &kp PG_DN   &kp END     &sl 3
                                        &none   &none   &none      &none    &kp C_PP      &none
            >;
        };

        NUMBER_layer {
            bindings = <
                &kp UNDER   &kp PLUS    &kp LBRC    &kp RBRC    &kp PIPE    &none    &kp N7      &kp N8      &kp N9  &kp BSPC
                &kp MINUS   &kp EQUAL   &kp LBRC    &kp RBRC    &kp BSLH    &none    &kp N4      &kp N5      &kp N6  &kp COLON
                &philmacro  &slmacro    &kp LPAR    &kp RPAR    &kp SEMI    &kp HOME    &kp N1      &kp N2      &kp N3  &kp DOT
                                        &none       &kp C_MUTE  &none       &none       &none    &kp N0
            >;
        };

        NAVIGATION_layer {
            bindings = <
                &bootloader &kp F2          &out OUT_USB    &out OUT_BLE    &bt BT_CLR      &none       &none    &none      &none     &none 
                &none       &none           &bt BT_SEL 0    &bt BT_SEL 1    &none           &none       &none    &none      &none  &none
                &none       &none           &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &none       &none    &none   &none  &none    
                                            &trans          &trans          &trans          &trans      &trans      &trans
            >;
        };
    };
};
